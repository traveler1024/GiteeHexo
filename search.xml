<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/TextHexo/2024/06/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>搭建自己的专属博客</title>
    <url>/TextHexo/2024/06/26/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>视频链接：【[教程]Hexo &amp; Github搭建自己的专属博客】 <a href="https://www.bilibili.com/video/BV1Eg41157tL/?share_source=copy_web&vd_source=62b7bd1aa7b6c35b49bf01b505dbde74">https://www.bilibili.com/video/BV1Eg41157tL/?share_source=copy_web&amp;vd_source=62b7bd1aa7b6c35b49bf01b505dbde74</a></p>
</blockquote>
<h1 id="1-安装Git和NodeJS"><a href="#1-安装Git和NodeJS" class="headerlink" title="1. 安装Git和NodeJS"></a>1. 安装Git和NodeJS</h1><ul>
<li><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%9C%A8%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95%E9%87%8C%E6%89%BE%E5%88%B0%E2%80%9CGit%E2%80%9D-%3E%E2%80%9CGit">https://git-scm.com/downloads，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git</a> Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>
</li>
<li><p>在Git中绑定Github账号，打开“Git Bash”，在命令框中依次输入两行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name “Your Name”        </span><br><span class="line">git config --global user.email email@example.com</span><br><span class="line"><span class="comment"># 其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于 Hexo 是基于 Node.js 驱动的一款博客框架，所以安装NodeJS <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 并配置环境变量。</p>
</li>
<li><p>安装之后可以输入以下命令查看是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h1><ul>
<li><p>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Hexo 完成后，在指定文件夹下打开“Git Bash”，再执行下列命令，Hexo 将会在指定文件夹中 新建所须要的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>若是上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览 器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 回车就能够预览效果了。</p>
</li>
</ul>
<h1 id="3-加载主题"><a href="#3-加载主题" class="headerlink" title="3. 加载主题"></a>3. 加载主题</h1><ul>
<li>大家可以去官网上找自己喜欢的主题下载<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> ，自己采用的主题是<a href="https://github.com/Siricee/hexo-theme-Chic">https://github.com/Siricee/hexo-theme-Chic</a> ，这款有明暗两种颜色。</li>
<li>butterfly主题：<a href="https://gitee.com/immyw/hexo-theme-butterfly%EF%BC%8C%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%EF%BC%9Ahttps://butterfly.js.org/posts/21cfbf15/">https://gitee.com/immyw/hexo-theme-butterfly，中文文档：https://butterfly.js.org/posts/21cfbf15/</a></li>
<li>基本大家用的最多的是NEXT主题：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></li>
<li>随后将下载的主题文件夹放在 myblog&#x2F;themes 中，在 _config.yml 文件中修改theme 为hexotheme-Chic(注意和主题文件名一致)</li>
<li>修改好之后在“Git Bash”中执行 hexo g 命令，然后再 hexo s ，在浏览器中输入 <a href="http://localhost:4/">http://localhost:4</a> 000 回车就能够预览修改主题后的效果了。</li>
</ul>
<h1 id="4-修改主题配置"><a href="#4-修改主题配置" class="headerlink" title="4. 修改主题配置"></a>4. 修改主题配置</h1><p>以hexo-theme-Chic主题为例，修改在主题文件夹下的 _config.yml 文件，完成自己个人的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Header   主页面标题</span></span><br><span class="line">navname: Bentham<span class="string">&#x27;s Blog</span></span><br><span class="line"><span class="string"># navigatior items 四个文件归类</span></span><br><span class="line"><span class="string">nav:</span></span><br><span class="line"><span class="string">  Posts: /archives</span></span><br><span class="line"><span class="string">  Categories: /category</span></span><br><span class="line"><span class="string">  Tags: /tag</span></span><br><span class="line"><span class="string">  About: /about</span></span><br><span class="line"><span class="string"># favicon   图标</span></span><br><span class="line"><span class="string">favicon: /favicon.ico</span></span><br><span class="line"><span class="string"># Profile   中间显示名字</span></span><br><span class="line"><span class="string">nickname: Jeremy Bentham</span></span><br><span class="line"><span class="string">### this variable is MarkDown form.</span></span><br><span class="line"><span class="string"># 个人描述，可以修改成自己要显示的句子</span></span><br><span class="line"><span class="string">description: Lorem ipsum dolor sit amet, **consectetur adipiscing elit.** </span></span><br><span class="line"><span class="string">&lt;br&gt;Fusce eget urna vitae velit *eleifend interdum at ac* nisi.</span></span><br><span class="line"><span class="string"># 个人头像图片</span></span><br><span class="line"><span class="string">avatar: /image/avatar.jpeg</span></span><br><span class="line"><span class="string"># main menu navigation</span></span><br><span class="line"><span class="string">## links key words should not be changed.</span></span><br><span class="line"><span class="string">## Complete url after key words.</span></span><br><span class="line"><span class="string">## Unused key can be commented out.</span></span><br><span class="line"><span class="string"># 下方超链接</span></span><br><span class="line"><span class="string">links:</span></span><br><span class="line"><span class="string">  Blog: /archives</span></span><br><span class="line"><span class="string">  # Category:</span></span><br><span class="line"><span class="string">  # Tags: </span></span><br><span class="line"><span class="string">  # Link:</span></span><br><span class="line"><span class="string">  # Resume:</span></span><br><span class="line"><span class="string">  # Publish:</span></span><br><span class="line"><span class="string">  # Trophy:</span></span><br><span class="line"><span class="string">  # Gallery:  # RSS:</span></span><br><span class="line"><span class="string">  # AliPay:</span></span><br><span class="line"><span class="string">  ZhiHu: https://www.zhihu.com/people/sirice</span></span><br><span class="line"><span class="string">  # LinkedIn:</span></span><br><span class="line"><span class="string">  # FaceBook:</span></span><br><span class="line"><span class="string">  # Twitter:</span></span><br><span class="line"><span class="string">  # Skype:</span></span><br><span class="line"><span class="string">  # CodeSandBox:</span></span><br><span class="line"><span class="string">  # CodePen:</span></span><br><span class="line"><span class="string">  # Sketch:</span></span><br><span class="line"><span class="string">  # Gitlab:</span></span><br><span class="line"><span class="string">  # Dribbble:</span></span><br><span class="line"><span class="string">  Instagram:</span></span><br><span class="line"><span class="string">  Reddit:</span></span><br><span class="line"><span class="string">  # YouTube:</span></span><br><span class="line"><span class="string">  # QQ:</span></span><br><span class="line"><span class="string">  # Weibo:</span></span><br><span class="line"><span class="string">  # WeChat:</span></span><br><span class="line"><span class="string">  Github: https://github.com/Siricee</span></span><br><span class="line"><span class="string"># how links show: you have 2 choice--text or icon. 图标 or 文字</span></span><br><span class="line"><span class="string">links_text_enable: false</span></span><br><span class="line"><span class="string">links_icon_enable: true</span></span><br><span class="line"><span class="string"># Post page</span></span><br><span class="line"><span class="string">## Post_meta</span></span><br><span class="line"><span class="string">post_meta_enable: true</span></span><br><span class="line"><span class="string">post_author_enable: true</span></span><br><span class="line"><span class="string">post_date_enable: true</span></span><br><span class="line"><span class="string">post_category_enable: true</span></span><br><span class="line"><span class="string">## Post copyright</span></span><br><span class="line"><span class="string">post_copyright_enable: true</span></span><br><span class="line"><span class="string">post_copyright_author_enable: true</span></span><br><span class="line"><span class="string">post_copyright_permalink_enable: true</span></span><br><span class="line"><span class="string">post_copyright_license_enable: true</span></span><br><span class="line"><span class="string">post_copyright_license_text: Copyright (c) 2019 &lt;a </span></span><br><span class="line"><span class="string">href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;CC-BY-NC-4.0&lt;/a&gt; </span></span><br><span class="line"><span class="string">LICENSE</span></span><br><span class="line"><span class="string">post_copyright_slogan_enable: true</span></span><br><span class="line"><span class="string">post_copyright_slogan_text: Do you believe in &lt;strong&gt;DESTINY&lt;/strong&gt;?</span></span><br><span class="line"><span class="string">## toc</span></span><br><span class="line"><span class="string">post_toc_enable: true</span></span><br><span class="line"><span class="string"># Page</span></span><br><span class="line"><span class="string">page_title_enable: true</span></span><br><span class="line"><span class="string"># Date / Time format</span></span><br><span class="line"><span class="string">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="string">## You can customize the date format as defined in</span></span><br><span class="line"><span class="string">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="string">date_format: MMMM D, YYYY</span></span><br><span class="line"><span class="string">time_format: H:mm:ss</span></span><br><span class="line"><span class="string"># stylesheets loaded in the &lt;head&gt;</span></span><br><span class="line"><span class="string">stylesheets:</span></span><br><span class="line"><span class="string">  - /css/style.css</span></span><br><span class="line"><span class="string"># scripts loaded in the end of the body</span></span><br><span class="line"><span class="string">scripts:</span></span><br><span class="line"><span class="string">  - /js/script.js</span></span><br><span class="line"><span class="string">  - /js/tocbot.min.js</span></span><br><span class="line"><span class="string">    # tscanlin/tocbot: Build a table of contents from headings in an HTML </span></span><br><span class="line"><span class="string">document.</span></span><br><span class="line"><span class="string">    # https://github.com/tscanlin/tocbot</span></span><br><span class="line"><span class="string"># plugin functions</span></span><br><span class="line"><span class="string">## Mathjax: Math Formula Support</span></span><br><span class="line"><span class="string">## https://www.mathjax.org</span></span><br><span class="line"><span class="string"># 数学公式</span></span><br><span class="line"><span class="string">mathjax:</span></span><br><span class="line"><span class="string">  enable: true</span></span><br><span class="line"><span class="string">  import: demand # global or demand</span></span><br><span class="line"><span class="string">  ## global: all pages will load mathjax,this will degrade performance and </span></span><br><span class="line"><span class="string">some grammers may be parsed wrong.</span></span><br><span class="line"><span class="string">  ## demand: Recommend option,if your post need fomula, you can declare </span></span><br><span class="line"><span class="string">&#x27;</span>mathjax: <span class="literal">true</span><span class="string">&#x27; in Front-matter</span></span><br></pre></td></tr></table></figure>

<h1 id="5-将博客部署在GitHub上"><a href="#5-将博客部署在GitHub上" class="headerlink" title="5. 将博客部署在GitHub上"></a>5. 将博客部署在GitHub上</h1><ul>
<li><p>点击 Start project 或者下面的 new repository 建立一个新的仓库，注意Github 仅能使用一个同 名仓库的代码托管一个静态站点，这里注意仓库名一定要是： 用户名.github.io </p>
</li>
<li><p>配置 SSH key ，要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 作准备。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;上面的邮箱&#x27;</span></span><br></pre></td></tr></table></figure>

<p>按照提示完成三次回车，便可生成 ssh key，采用以下指令也可以查看自己的ssh密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>登陆 Github 上添加刚刚生成的SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSH  and GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你 的 SSH keys 列表里就会看到你刚刚添加的密钥。</p>
<p>在github上添加完ssh key后，如果是首次使用还须要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully  authenticated, but GitHub does not provide shell access. 内容，则证实添加成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com </span><br></pre></td></tr></table></figure>
</li>
<li><p>此时，本地和Github的工做作得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署 教程。先不着急，部署以前还须要修改配置和安装部署插件。第一：打开项目根目录下的  _config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/yourusername/your-repo.git</span><br><span class="line">  <span class="comment">#repository: git@github.com/yourusername/your-repo.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二要安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行如下两条命令就能够部署上传啦，如下 g 是 generate 缩写，d 是 deploy 缩写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g    <span class="comment"># 先生成</span></span><br><span class="line">hexo d  <span class="comment"># 部署到Github上</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>这时用浏览器输入 用户名.github.io 就可以访问刚才的网站啦。</p>
</li>
</ul>
<h1 id="6-写文章并上传"><a href="#6-写文章并上传" class="headerlink" title="6. 写文章并上传"></a>6. 写文章并上传</h1><ul>
<li><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档能够看 hexo 官网。新建文章，输 入如下命令便可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;文章标题&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完成后能够在 &#x2F;source&#x2F;_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown  格式的文件，具体用法能够在网上找一下，语法仍是比较简单的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: blogTest</span><br><span class="line"><span class="built_in">date</span>: 2021-08-20 18:07:21</span><br><span class="line">tags: Test   <span class="comment">#标签</span></span><br><span class="line">categories: blog1   <span class="comment">#分组</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">### 1. This is a blog Test</span></span><br><span class="line">* First</span><br><span class="line">* Second</span><br><span class="line">---</span><br><span class="line"><span class="comment">### 2. Show Text</span></span><br><span class="line">* **这是加粗**</span><br><span class="line">&gt; *这是斜体*</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g    <span class="comment"># 生成文件</span></span><br><span class="line">hexo s    <span class="comment"># 本地服务器查看网站</span></span><br><span class="line">hexo d    <span class="comment"># 部署到Github 上</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="7-配置一些特效"><a href="#7-配置一些特效" class="headerlink" title="7. 配置一些特效"></a>7. 配置一些特效</h1><blockquote>
<p>针对hexo-theme-Chic主题，或者layout文件夹里是ejs格式文件的也行</p>
</blockquote>
<ul>
<li><p>雪花特效： themes\hexo-theme-Chic\layout\index.ejs 中添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> </span><br><span class="line">src=<span class="string">&quot;https://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> </span><br><span class="line">src=<span class="string">&quot;https://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/snow.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>蜘蛛网特效： themes\hexo-theme-Chic\layout\layout.ejs 中添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">!</span><br><span class="line"><span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="keyword">function</span> n(n, e, t) &#123;</span><br><span class="line">        <span class="built_in">return</span> n.getAttribute(e) || t</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">function</span> e(n) &#123;</span><br><span class="line">        <span class="built_in">return</span> document.getElementsByTagName(n)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">t</span></span>() &#123;        var t = e(<span class="string">&quot;script&quot;</span>),</span><br><span class="line">        o = t.length,</span><br><span class="line">        i = t[o - 1];</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            l: o,</span><br><span class="line">            z: n(i, <span class="string">&quot;zIndex&quot;</span>, -1),     //置于主页面背后</span><br><span class="line">            o: n(i, <span class="string">&quot;opacity&quot;</span>, .5),     //线条透明度</span><br><span class="line">            c: n(i, <span class="string">&quot;color&quot;</span>, <span class="string">&quot;0,0,0&quot;</span>),  //线条颜色</span><br><span class="line">            n: n(i, <span class="string">&quot;count&quot;</span>, 100)    //线条数量</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">o</span></span>() &#123;</span><br><span class="line">        a = m.width = window.innerWidth || </span><br><span class="line">document.documentElement.clientWidth || document.body.clientWidth,</span><br><span class="line">        c = m.height = window.innerHeight || </span><br><span class="line">document.documentElement.clientHeight || document.body.clientHeight</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">i</span></span>() &#123;</span><br><span class="line">        r.clearRect(0, 0, a, c);</span><br><span class="line">        var n, e, t, o, m, l;</span><br><span class="line">        s.forEach(<span class="keyword">function</span>(i, x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i.x += i.xa, i.y += i.ya, i.xa *= i.x &gt; a || i.x &lt; 0 ? -1 : </span><br><span class="line">1, i.ya *= i.y &gt; c || i.y &lt; 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, </span><br><span class="line">1), e = x + 1; e &lt; u.length; e++) n = u[e],</span><br><span class="line">            null !== n.x &amp;&amp; null !== n.y &amp;&amp; (o = i.x - n.x, m = i.y - n.y, l </span><br><span class="line">= o * o + m * m, l &lt; n.max &amp;&amp; (n === y &amp;&amp; l &gt;= n.max / 2 &amp;&amp; (i.x -= .03 * o, </span><br><span class="line">i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / </span><br><span class="line">2, r.strokeStyle = <span class="string">&quot;rgba(&quot;</span> + d.c + <span class="string">&quot;,&quot;</span> + (t + .2) + <span class="string">&quot;)&quot;</span>, r.moveTo(i.x, i.y), </span><br><span class="line">r.lineTo(n.x, n.y), r.stroke()))</span><br><span class="line">       &#125;),</span><br><span class="line">        x(i)</span><br><span class="line">   &#125;</span><br><span class="line">    var a, c, u, m = document.createElement(<span class="string">&quot;canvas&quot;</span>),</span><br><span class="line">    d = t(),</span><br><span class="line">    l = <span class="string">&quot;c_n&quot;</span> + d.l,</span><br><span class="line">    r = m.getContext(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">    x = window.requestAnimationFrame || window.webkitRequestAnimationFrame </span><br><span class="line">|| window.mozRequestAnimationFrame || window.oRequestAnimationFrame || </span><br><span class="line">window.msRequestAnimationFrame ||</span><br><span class="line">    <span class="keyword">function</span>(n) &#123;</span><br><span class="line">        window.setTimeout(n, 1e3 / 45)</span><br><span class="line">   &#125;,</span><br><span class="line">    w = Math.random,</span><br><span class="line">    y = &#123;</span><br><span class="line">        x: null,</span><br><span class="line">        y: null,</span><br><span class="line">        max: 2e4</span><br><span class="line">   &#125;;</span><br><span class="line">    m.id = l,</span><br><span class="line">    m.style.cssText = <span class="string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span> + d.z + </span><br><span class="line"><span class="string">&quot;;opacity:&quot;</span> + d.o,</span><br><span class="line">    e(<span class="string">&quot;body&quot;</span>)[0].appendChild(m),</span><br><span class="line">    o(),</span><br><span class="line">    window.onresize = o,</span><br><span class="line">    window.onmousemove = <span class="keyword">function</span>(n) &#123;</span><br><span class="line">        n = n || window.event,</span><br><span class="line">        y.x = n.clientX,</span><br><span class="line">        y.y = n.clientY</span><br><span class="line">   &#125;,</span><br><span class="line">    window.onmouseout = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        y.x = null,</span><br><span class="line">        y.y = null</span><br><span class="line">   &#125;;</span><br><span class="line">    <span class="keyword">for</span> (var s = [], f = 0; d.n &gt; f; f++) &#123;</span><br><span class="line">        var h = w() * a,</span><br><span class="line">        g = w() * c,</span><br><span class="line">        v = 2 * w() - 1,</span><br><span class="line">        p = 2 * w() - 1;</span><br><span class="line">        s.push(&#123;</span><br><span class="line">            x: h,</span><br><span class="line">            y: g,</span><br><span class="line">            xa: v,</span><br><span class="line">            ya: p,</span><br><span class="line">            max: 6e3</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">    u = s.concat([y]),</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        i()</span><br><span class="line">   &#125;,</span><br><span class="line">    100)</span><br><span class="line">&#125; ();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>评论区采用的时Valine <a href="https://valine.js.org/">https://valine.js.org/</a> 和LeanCloud</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>hexo安装</tag>
      </tags>
  </entry>
  <entry>
    <title>小记-2024-6-25</title>
    <url>/TextHexo/2024/06/26/%E5%B0%8F%E8%AE%B0-2024-6-25/</url>
    <content><![CDATA[<h1 id="普中RTOS视频"><a href="#普中RTOS视频" class="headerlink" title="普中RTOS视频"></a>普中RTOS视频</h1><ul>
<li>链接：<a href="https://www.bilibili.com/video/BV1pa411K7vb?p=9&vd_source=cf0efe700186e7bdc8714cbae853fd0c">https://www.bilibili.com/video/BV1pa411K7vb?p=9&amp;vd_source=cf0efe700186e7bdc8714cbae853fd0c</a></li>
</ul>
<h1 id="CSDN的RTOS操作"><a href="#CSDN的RTOS操作" class="headerlink" title="CSDN的RTOS操作"></a>CSDN的RTOS操作</h1><ul>
<li>链接：<a href="https://blog.csdn.net/qq_45899177/article/details/136675268?ops_request_misc=&request_id=&biz_id=102&utm_term=stm32f103c8t6%E7%A7%BB%E6%A4%8Dfreertos&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-136675268.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_45899177/article/details/136675268?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=stm32f103c8t6%E7%A7%BB%E6%A4%8Dfreertos&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-136675268.142^v100^pc_search_result_base9&amp;spm=1018.2226.3001.4187</a></li>
</ul>
<blockquote>
<p>他们其实操作都是一样的，只不过他们分的文件夹不同，但是用的文件都是一样的,注意那个misc.h的文件 9kB的</p>
</blockquote>
]]></content>
      <categories>
        <category>嵌入式RTOS</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的使用Github Action服务来将Hexo部署到Github Pages</title>
    <url>/TextHexo/2024/06/26/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Github%20Action%E6%9C%8D%E5%8A%A1%E6%9D%A5%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%20Pages/</url>
    <content><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>Bilibili视频教程-9分钟零成本搭建自动化部署个人博客(Hexo + Github Action + Page)：<a href="https://www.bilibili.com/video/BV1xTgTemEDU">https://www.bilibili.com/video/BV1xTgTemEDU</a></p>
<p>Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<p>利用 GitHub Action 自动部署 Hexo 博客：<a href="https://cloud.tencent.com/developer/article/2201648">https://cloud.tencent.com/developer/article/2201648</a></p>
<p>Hexo主题-Icarus快速上手：<a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/icarus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/#install-npm">https://ppoffice.github.io/hexo-theme-icarus/uncategorized/icarus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/#install-npm</a></p>
<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>当前PC环境中有Node和Git。版本可以参考Hexo文档。</p>
<p>文章中出现的yourusername为Github用户名，your-repo为仓库名。</p>
<h1 id="1-初始化Hexo"><a href="#1-初始化Hexo" class="headerlink" title="1. 初始化Hexo"></a>1. 初始化Hexo</h1><p>安装脚手架，初始化hexo，这会新建blog文件夹，进入后安装依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h1 id="2-初始化仓库"><a href="#2-初始化仓库" class="headerlink" title="2. 初始化仓库"></a>2. 初始化仓库</h1><p>可以选择利用VSCode等软件直接对项目开源到github仓库。</p>
<p>也可以手动去github创建一个空仓库，然后手动在命令行中推送。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/yourusername/your-repo.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h1 id="3-创建Token"><a href="#3-创建Token" class="headerlink" title="3. 创建Token"></a>3. 创建Token</h1><p>访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token,创建的 Token 名称随意，但必须勾选 repo 项 和 workflows 项</p>
<p>在个人设置中新增一个Personal access tokens。至少要包含repo权限，然后记住token。<br>这个token是给Github Action用的，Github Action会把Hexo编译部署到gh-pages分支。</p>
<img src="/TextHexo/2024/06/26/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Github%20Action%E6%9C%8D%E5%8A%A1%E6%9D%A5%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%20Pages/image1.png" class="" title="This is an example image">

<p>之后需要自己到仓库的 Settings-&gt;Secrets-&gt;actions 下添加环境变量</p>
<p>随后在存放Hexo代码的仓库里把这个Token新增进去，名称为GH_TOKEN(随意，后面需要一致)。</p>
<img src="/TextHexo/2024/06/26/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8Github%20Action%E6%9C%8D%E5%8A%A1%E6%9D%A5%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%20Pages/image.png" class="" title="This is an example image">
<h1 id="4-修改-config-yml"><a href="#4-修改-config-yml" class="headerlink" title="4. 修改_config.yml"></a>4. 修改_config.yml</h1><p>在_config.yml中修改deploy字段。指示Hexo在deploy时的推送地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/yourusername/your-repo.git</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>

<h1 id="5-配置Github-Action工作流"><a href="#5-配置Github-Action工作流" class="headerlink" title="5. 配置Github Action工作流"></a>5. 配置Github Action工作流</h1><p>在.github文件夹下新增workflows文件夹，然后新增deploy.yml文件，内容如下。</p>
<p>里面有个node-version要和你本地的node一致。</p>
<p>步骤大致意思就是使用ubuntu-latest作为基础环境，然后安装各种依赖，随后hexo generate生成博客网站静态文件夹，<br>把这个文件夹推送到同一仓库的gh-pages分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: Deploy Hexo to GitHub Pages</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main  <span class="comment"># 当推送到 main 分支时触发</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout repository</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          submodules: <span class="literal">false</span>  <span class="comment"># 禁用子模块检查</span></span><br><span class="line"></span><br><span class="line">      - name: Setup Node.js</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: <span class="string">&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line">      - name: Install Dependencies</span><br><span class="line">        run: npm install</span><br><span class="line"></span><br><span class="line">      - name: Install Hexo Git Deployer</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-deployer-git --save</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: Clean and Generate Static Files</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - name: Configure Git</span><br><span class="line">        run: |</span><br><span class="line">          git config --global user.name <span class="string">&#x27;github-actions[bot]&#x27;</span></span><br><span class="line">          git config --global user.email <span class="string">&#x27;github-actions[bot]@users.noreply.github.com&#x27;</span></span><br><span class="line"></span><br><span class="line">      - name: Deploy to GitHub Pages</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">          GH_TOKEN: <span class="variable">$&#123;&#123; secrets.GH_TOKEN &#125;</span>&#125;</span><br><span class="line">        run: |</span><br><span class="line">          <span class="built_in">cd</span> public/</span><br><span class="line">          git init</span><br><span class="line">          git add -A</span><br><span class="line">          git commit -m <span class="string">&quot;Create by workflows&quot;</span></span><br><span class="line">          git remote add origin https://<span class="variable">$&#123;&#123; secrets.GH_TOKEN &#125;</span>&#125;@github.com/yourusername/your-repo.git</span><br><span class="line">          git push origin HEAD:gh-pages -f</span><br></pre></td></tr></table></figure>

<h1 id="6-推送验证"><a href="#6-推送验证" class="headerlink" title="6. 推送验证"></a>6. 推送验证</h1><p>把刚才更新的所有文件都推送一遍，github就会触发工作流，然后去网站看工作流运转的如何。<br>等一切运转完毕，就会发现仓库多出一个gh-pages分支。</p>
<h1 id="7-配置Github-Pages"><a href="#7-配置Github-Pages" class="headerlink" title="7. 配置Github Pages"></a>7. 配置Github Pages</h1><p>在仓库settings中配置page来源为gh-pages分支即可。等待网站部署完毕，就可以看了。网站链接可以在settings的GitHub Pages看到，也可以去action里看到。</p>
<h1 id="8-修改Hexo主题样式"><a href="#8-修改Hexo主题样式" class="headerlink" title="8. 修改Hexo主题样式"></a>8. 修改Hexo主题样式</h1><p>以一个比较热门的主题为演示示例，参考地址<a href="https://github.com/ppoffice/hexo-theme-icarus%E3%80%82">https://github.com/ppoffice/hexo-theme-icarus。</a></p>
<p>若要使用NPM将Icarus安装为Node包，在你的Hexo站点根目录运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -S hexo-theme-icarus hexo-renderer-inferno</span><br></pre></td></tr></table></figure>

<p>接下来，使用hexo命令修改主题为Icarus:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo config theme icarus</span><br></pre></td></tr></table></figure>

<p>会发现多出一个_config.icarus.yml文件。这是Icarus主题的配置文件。</p>
<p>最后推送到仓库，等待部署后，就可以了。</p>
<h1 id="10-添加文章"><a href="#10-添加文章" class="headerlink" title="10. 添加文章"></a>10. 添加文章</h1><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p>
<p>文章添加编辑后，现在只需要推送到仓库，那么github不仅会保存你的Hexo个人博客源码，还会自动更新个人博客静态页面到gh-pages，由此触发github-page功能来更新你的个人博客网站。</p>
<h1 id="遇到了一些问题和方案"><a href="#遇到了一些问题和方案" class="headerlink" title="遇到了一些问题和方案"></a>遇到了一些问题和方案</h1><h2 id="1-网站没有样式问题"><a href="#1-网站没有样式问题" class="headerlink" title="1. 网站没有样式问题"></a>1. 网站没有样式问题</h2><p>在网站打开F12，发现css等样式资源无法加载，仔细查看报错原因和请求地址，发现并不是当前仓库。</p>
<p>缺少仓库地址，所以把请求地址复制一份，并在后面添加上仓库名即可，这需要修改_config.yml中修改url字段。yourusername似乎为小写。</p>
<p>推送后等待工作流执行，查看结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url: https://yourusername.github.io/your-repo/</span><br><span class="line">root: /your-repo/</span><br></pre></td></tr></table></figure>

<h2 id="2-图片不显示"><a href="#2-图片不显示" class="headerlink" title="2. 图片不显示"></a>2. 图片不显示</h2><p>  在_config.yml中设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>  意思是每个md博文会单独配套一个同名文件夹，用来存放图片。形如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span>/_posts/</span><br><span class="line">├── my-new-post.md</span><br><span class="line">└── my-new-post/</span><br><span class="line">    └── example.jpg</span><br></pre></td></tr></table></figure>

<p>hexo提供三种语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>那么在md中可以这样引用图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，部署的时候图片就不会不显示了，但是有个新的问题，<br>我在本地编辑md的时候无法预览图片怎么办。</p>
<p>建议用VSCode下载插件vscode-hexo和Hexo Utils，随后在左边栏目就可以看到新Hexo Utils的新菜单，只要你的VSCode当前打开的文件夹是hexo的根目录，那么插件就会自动识别到，当你对md文件使用“侧边预览”时，图片就正常显示了。</p>
]]></content>
      <tags>
        <tag>hexo安装</tag>
      </tags>
  </entry>
</search>
